<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2009,2010 Sony Corporation -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" applicationComplete="initApp()" layout="absolute">
	<mx:Button x="10" y="10" label="Start Polling" id="button1" click="buttonClick();"/>
	<mx:TextArea x="10" y="40" width="258" height="120" id="textArea1" editable="false"/>
	
	<mx:Script>
		<![CDATA[
			import com.sony.jp.felica.FeliCaControl;

			import com.sony.jp.felica.FeliCaOpenReaderWriterAutoRequest;
			import com.sony.jp.felica.FeliCaOpenReaderWriterAutoResponse;
			import com.sony.jp.felica.FeliCaPollingAndGetCardInformationRequest;
			import com.sony.jp.felica.FeliCaPollingAndGetCardInformationResponse;
			import com.sony.jp.felica.FeliCaCloseReaderWriterRequest;
			import com.sony.jp.felica.FeliCaCloseReaderWriterResponse;
			
			import com.sony.jp.felica.event.OpenStatusEvent;
			import com.sony.jp.felica.event.FeliCaStatusEvent;
			import com.sony.jp.felica.error.FeliCaAccessError;
			
			import flash.utils.setInterval;
			import flash.utils.clearInterval;
			
			import mx.utils.SHA256;
			import flash.external.*;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			private var fc:FeliCaControl = new FeliCaControl();
			
			private var waitIntervalId:uint;
			
			private var pollingIntervalId:uint = 0;

			private var exitPollingFlag:Boolean = false;
			
			private var serverToken:String;

			private function initApp():void
			{
				fc.addEventListener(OpenStatusEvent.OPEN_COMPLETE, onOpenComplete);
			    fc.addEventListener(OpenStatusEvent.OPEN_FAILURE, onOpenFailure);
			    
			    serverToken = FlexGlobals.topLevelApplication.parameters.serverToken;		

			    fc.open(10250);
			}

			private function buttonClick():void
			{
				fc.addEventListener(OpenStatusEvent.OPEN_COMPLETE, onOpenComplete);
				fc.addEventListener(OpenStatusEvent.OPEN_FAILURE, onOpenFailure);		

				fc.open(10250);
			}
			
			private function onOpenComplete(evt:OpenStatusEvent):void
			{
				fc.addEventListener(FeliCaStatusEvent.FELICA_ACCESS_COMPLETE, onFeliCaAccessComplete);
				fc.addEventListener(FeliCaStatusEvent.FELICA_ACCESS_FAILURE, onFeliCaAccessFailure);
				fc.addEventListener(FeliCaStatusEvent.FELICA_ACCESS_PARAMETER_ERROR, onFeliCaAccessParameterError);
				
				RwOpen();
			}

			private function onOpenFailure(evt:OpenStatusEvent):void
			{
				var error:Error	=	evt.object as Error;
				displayMessage(	"Failure: could not connect to FeliCaProxy\n" +
								"   ERROR : (" + error.errorID + ") " + error.message);
								
				var ret:String;
        		try{
        			Security.allowDomain("*");
			        if (ExternalInterface.available)
			        {
			            ExternalInterface.call("faSetDeviceStateFalied");
			        }
		        }catch (error:Error){
		        	ret = error.message;
		        	Alert.show(ret);
		        }
			}

			private function onFeliCaAccessComplete(evt:FeliCaStatusEvent):void
			{
				if (evt.object is FeliCaOpenReaderWriterAutoResponse)
				{
					displayMessage("Opened Reader/Writer");
					this.pollingIntervalId = setInterval(exitPolling, 30000);
					exitPollingFlag = false;
					Polling();
					
					var ret:String;
	        		try{
	        			Security.allowDomain("*");
				        if (ExternalInterface.available)
				        {
				            ExternalInterface.call("faSetDeviceStateStandBy");
				        }
			        }catch (error:Error){
			        	ret = error.message;
			        	Alert.show(ret);
			        }
				}
				else if (evt.object is FeliCaPollingAndGetCardInformationResponse)
				{
					var response:FeliCaPollingAndGetCardInformationResponse = evt.object as FeliCaPollingAndGetCardInformationResponse;
					
					var idmByteArray:ByteArray = new ByteArray();
					idmByteArray.writeUTFBytes(response.idm);
					var idmHash:String = SHA256.computeDigest(idmByteArray);
					
					var pmmByteArray:ByteArray = new ByteArray();
					pmmByteArray.writeUTFBytes(response.pmm);
					var pmmHash:String = SHA256.computeDigest(pmmByteArray);
					
					var felicaAuthIdentifier:String = idmHash + pmmHash + serverToken;
					
					var felicaAuthIdentifierByteArray:ByteArray = new ByteArray();
					felicaAuthIdentifierByteArray.writeUTFBytes(felicaAuthIdentifier);
					var felicaAuthIdentifierHash:String = SHA256.computeDigest(felicaAuthIdentifierByteArray);
					
					setAuthIdentifier(felicaAuthIdentifierHash);
					
					displayMessage(	"Found FeliCa \n" +
											"  idm = " + response.idm + "\n" +
											"  pmm = " + response.pmm + "\n" +
											"  serverToken = " + serverToken + "\n" +
											"  FeliCaAuthIdentifier = " + felicaAuthIdentifierHash);
					this.nextProcess();
				}
				else if (evt.object is FeliCaCloseReaderWriterResponse)
				{
					displayMessage("Closed Reader/Writer");
					FeliCaProxyClose();
				}
			}
		
			private function onFeliCaAccessFailure(evt:FeliCaStatusEvent):void
			{
				var errorMsg:String;
				if (evt.object is FeliCaAccessError)
				{
					var error1:FeliCaAccessError = evt.object as FeliCaAccessError;
					
					if (error1.rwError == 157)	// FeliCaが検出できなかった場合
					{
						//	次の実行処理を行う
						this.nextProcess();
					}
					else		//	その他のエラーが発生した場合
					{
						//	その他のエラーが発生した場合の処理を記述する
					}
				}
			}
			
			private function setAuthIdentifier(identifier:String):void
			{
				var ret:String;
        		try{
        			Security.allowDomain("*");
			        if (ExternalInterface.available)
			        {
			            ExternalInterface.call("faSetAuthIdentifier", identifier);
			        }
		        }catch (error:Error){
		        	ret = error.message;
		        	Alert.show(ret);
		        }
			}

			private function onFeliCaAccessParameterError(evt:FeliCaStatusEvent):void
			{
				var error:Error	= evt.object as Error;
				displayMessage(	"Failure: Parameter Error\n" +
										"   ERROR: (" + error.errorID + ")");

				FeliCaProxyClose();
			}

			private function nextProcess():void
			{
				if (this.exitPollingFlag == true)	//	30秒のタイムアウトが発生していた場合
				{
						//	リーダ／ライタのクローズを実行
						RwClose();
				}
				else
				{
					//	次の Polling まで 500 ミリ秒待ち合わせる
					this.waitIntervalId = setInterval(execPolling, 500);
				}

			}

			private function execPolling():void
			{
				//	指定した setInterval() 呼び出しをキャンセル
				clearInterval(this.waitIntervalId);
				
				//	FeliCaカードを検出するために、Polling の実行
				Polling();
			}
		
			private function exitPolling():void
			{
				//	連続 Polling 終了フラグのセット
				this.exitPollingFlag = true;
				
				//	指定した setInterval() 呼び出しをキャンセル
				clearInterval(this.pollingIntervalId);
			}

			private function RwOpen():void
			{
				fc.access(new FeliCaOpenReaderWriterAutoRequest());
			}

			private function Polling():void
			{
				var request:FeliCaPollingAndGetCardInformationRequest = new FeliCaPollingAndGetCardInformationRequest();		
				request.systemCode	= "FFFF";
				fc.access(request);
			}

			private function RwClose():void
			{
				fc.access(new FeliCaCloseReaderWriterRequest());
			}

			
			private function FeliCaProxyClose():void
			{
				if (fc.close() == true)
				{
					displayMessage("Disconnected from FeliCaProxy");
					
					var ret:String;
	        		try{
	        			Security.allowDomain("*");
				        if (ExternalInterface.available)
				        {
				            ExternalInterface.call("faSetDeviceStateDisconnected");
				        }
			        }catch (error:Error){
			        	ret = error.message;
			        	Alert.show(ret);
			        }
				}
				else
				{
					displayMessage("Failure: Could not disconnect from FeliCaProxy");
				}
			}
			
			private function displayMessage(msg:String):void
			{
				textArea1.text += msg;
				textArea1.text += "\n";
				
				this.callLater(setScroll);
			}

			private function setScroll():void
			{
				textArea1.verticalScrollPosition = textArea1.maxVerticalScrollPosition;
			}
		]]>
	</mx:Script>
	
</mx:Application>
